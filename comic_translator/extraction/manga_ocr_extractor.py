"""
Manga OCR Extractor
Êº´Áï´OCRÊì∑ÂèñÂô®

‰ΩøÁî®manga-ocrÈÄ≤Ë°åÊó•ÊñáÊñáÂ≠óÊì∑Âèñ
"""

import cv2
import torch
from PIL import Image
from pathlib import Path
from typing import List, Dict, Union


class MangaOCRExtractor:
    """Êº´Áï´OCRÊì∑ÂèñÂô®"""
    
    def __init__(self):
        """ÂàùÂßãÂåñOCRÊì∑ÂèñÂô®"""
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        self.ocr_model = None
        self._init_ocr()
    
    def _init_ocr(self):
        """ÂàùÂßãÂåñOCRÊ®°Âûã"""
        try:
            import manga_ocr
            self.ocr_model = manga_ocr.MangaOcr()
            print(f"‚úÖ Manga OCRÂàùÂßãÂåñÂÆåÊàê (Ë®≠ÂÇô: {self.device})")
            
            if self.device == 'cuda':
                print(f"üöÄ GPU: {torch.cuda.get_device_name()}")
                
        except Exception as e:
            print(f"‚ùå Manga OCRÂàùÂßãÂåñÂ§±Êïó: {e}")
            raise
    
    def extract_from_region(self, image: Union[str, Image.Image], bbox: List[int]) -> str:
        """
        ÂæûÊåáÂÆöÂçÄÂüüÊì∑ÂèñÊñáÂ≠ó
        
        Args:
            image: ÂúñÂÉèË∑ØÂæëÊàñPIL Image
            bbox: ÊñáÂ≠óÊ°ÜÂ∫ßÊ®ô [x, y, w, h]
            
        Returns:
            str: Êì∑ÂèñÁöÑÊñáÂ≠ó
        """
        if self.ocr_model is None:
            raise RuntimeError("OCRÊ®°ÂûãÊú™ÂàùÂßãÂåñ")
        
        # ËôïÁêÜËº∏ÂÖ•ÂúñÂÉè
        if isinstance(image, str):
            image_cv = cv2.imread(image)
            if image_cv is None:
                raise ValueError(f"ÁÑ°Ê≥ïËÆÄÂèñÂúñÂÉè: {image}")
        else:
            # ÂÅáË®≠ÊòØPIL ImageÔºåËΩâÊèõÁÇ∫opencvÊ†ºÂºè
            import numpy as np
            image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        
        # Ë£ÅÂàáÂçÄÂüü
        x, y, w, h = bbox
        region = image_cv[y:y+h, x:x+w]
        
        if region.size == 0:
            return ""
        
        # ËΩâÊèõÁÇ∫PILÊ†ºÂºè
        region_pil = Image.fromarray(cv2.cvtColor(region, cv2.COLOR_BGR2RGB))
        
        # OCRÊì∑Âèñ
        try:
            text = self.ocr_model(region_pil)
            return text.strip() if text else ""
        except Exception as e:
            print(f"‚ö†Ô∏è OCRÊì∑ÂèñÂ§±Êïó: {e}")
            return ""
    
    def extract_from_boxes(self, image_path: str, text_boxes: List[List[int]]) -> List[Dict]:
        """
        ÂæûÂ§öÂÄãÊñáÂ≠óÊ°ÜÊì∑ÂèñÊñáÂ≠ó
        
        Args:
            image_path: ÂúñÂÉèË∑ØÂæë
            text_boxes: ÊñáÂ≠óÊ°ÜÂ∫ßÊ®ôÂàóË°®
            
        Returns:
            List[Dict]: Êì∑ÂèñÁµêÊûúÂàóË°®
        """
        if not text_boxes:
            return []
        
        # ËÆÄÂèñÂúñÂÉè
        image = cv2.imread(image_path)
        if image is None:
            raise ValueError(f"ÁÑ°Ê≥ïËÆÄÂèñÂúñÂÉè: {image_path}")
        
        results = []
        successful_count = 0
        
        for i, bbox in enumerate(text_boxes):
            print(f"üìñ ËôïÁêÜÊñáÂ≠óÊ°Ü {i+1}/{len(text_boxes)}")
            
            text = self.extract_from_region(image_path, bbox)
            
            if text:
                results.append({
                    'box_index': i,
                    'bbox': bbox,
                    'text': text,
                    'confidence': 0.9  # manga-ocrÊ≤íÊúâÊèê‰æõÁΩÆ‰ø°Â∫¶Ôºå‰ΩøÁî®Âõ∫ÂÆöÂÄº
                })
                successful_count += 1
                print(f"  ‚úÖ '{text}'")
            else:
                print(f"  ‚ö†Ô∏è Êú™Ë≠òÂà•Âà∞ÊñáÂ≠ó")
        
        print(f"üéØ ÊàêÂäüÊì∑Âèñ {successful_count}/{len(text_boxes)} ÂÄãÊñáÂ≠óÊ°Ü")
        return results
    
    def extract_single(self, image_path: str, bbox: List[int]) -> Dict:
        """
        ÂñÆ‰∏ÄÊñáÂ≠óÊ°ÜÊì∑Âèñ
        
        Args:
            image_path: ÂúñÂÉèË∑ØÂæë
            bbox: ÊñáÂ≠óÊ°ÜÂ∫ßÊ®ô [x, y, w, h]
            
        Returns:
            Dict: Êì∑ÂèñÁµêÊûú
        """
        text = self.extract_from_region(image_path, bbox)
        
        return {
            'bbox': bbox,
            'text': text,
            'confidence': 0.9 if text else 0.0
        }
    
    def get_device_info(self) -> Dict:
        """
        Áç≤ÂèñË®≠ÂÇôË≥áË®ä
        
        Returns:
            Dict: Ë®≠ÂÇôË≥áË®ä
        """
        info = {
            'device': self.device,
            'cuda_available': torch.cuda.is_available()
        }
        
        if torch.cuda.is_available():
            info['gpu_name'] = torch.cuda.get_device_name()
            info['gpu_memory'] = torch.cuda.get_device_properties(0).total_memory
        
        return info 